"use strict";
angular
        .module('chat', [
    
            //module for state routing.
            'ui.router'

        ]);
(function () {
    'use strict';

    angular
        .module('chat')
        .service('chatService', chatService)

    chatService.$inject = ['$q', '$http', 'constantService']

    /** @ngInject */
    function chatService($q, $http, constantService) {

        var vm = this;

        vm.getChat = function () {
            var deferred = $q.defer();
            $http.get(constantService.getUrlChat(), {
                cache: false,
            })
                .success(function (data) {
                    deferred.resolve({error: false, chats: data});
                })
                .error(function (err) {
                    deferred.resolve({error: true, e: err});
                });
            return deferred.promise;
        };

        return {
            getChat: vm.getChat
        };

    }

}());
(function () {
    'use strict';

    angular
        .module('chat')
        .controller('loginController', loginController)

    loginController.$injejct = ['$state', 'chatService', 'utilitiesService'];

    function loginController($state, utilitiesService) {
        var vm = this;
        vm.client = {};
        vm.messagevalidation = false;
        vm.class = 'form-input form-input-valid';

        if(utilitiesService.getLocalStorageItem("nickname") != null || utilitiesService.getLocalStorageItem("nickname") != undefined){
            $state.go('chat');
        }

        vm.login = function() {
            utilitiesService.setLocalStorageItem("nickname", vm.client.nickname);
            $state.go('chat');
        };

        vm.validate = function (valid) {
            if (!valid) {
                vm.messagevalidation = true;
                vm.class = 'form-input form-input-invalid';
            }
        }
    }

} ());
(function () {
    'use strict';

    angular
        .module('chat')
        .service('chatService', chatService)

    chatService.$inject = ['$q', '$http', 'constantService']

    /** @ngInject */
    function chatService($q, $http, constantService) {

        var vm = this;

        vm.getUsers = function () {
            var deferred = $q.defer();
            $http.get(constantService.getUrlUsers(), {
                cache: false,
            })
                .success(function (data) {
                    deferred.resolve({error: false, users: data});
                })
                .error(function (err) {
                    deferred.resolve({error: true, e: err});
                });
            return deferred.promise;
        };

        vm.getChat = function () {
            var deferred = $q.defer();
            $http.get(constantService.getUrlChat(), {
                cache: false,
            })
                .success(function (data) {
                    deferred.resolve({error: false, chats: data});
                })
                .error(function (err) {
                    deferred.resolve({error: true, e: err});
                });
            return deferred.promise;
        };

        return {
            getUsers: vm.getUsers,
            getChat: vm.getChat

        }

    }

}());
(function () {
    'use strict';

    angular
        .module('chat')
        .controller('chatController', loginController)

    loginController.$injejct = ['$state', 'chatService', 'socketio', 'utilitiesService'];

    /** @ngInject */
    function loginController($state, chatService, socketio, utilitiesService) {
        var vm = this;
        vm.users = [];
        vm.chats = [];
        vm.message;
        vm.nick;
        vm.gif = false;
        vm.menu = '';
        vm.nickname_storage = utilitiesService.getLocalStorageItem("nickname");

        if (vm.nickname_storage == null || vm.nickname_storage == undefined) {
            $state.go('login');
        }
        else {
            socketio.emit('user-new', vm.nickname_storage);
        }

        vm.getChat = function () {
            chatService.getChat().then(function (data) {
                vm.chats = data.chats;
            });
        };

        vm.getUsers = function () {
            chatService.getUsers().then(function (data) {
                vm.users = data.users;
            });
        };

        vm.newMessage = function () {
            if (vm.message != "") {
                var newMessage = {id: 1, message: "", nick: vm.nickname_storage, gif: ""};
                if (!vm.gif) {
                    newMessage.message = vm.message;
                    vm.chats.push(newMessage);
                    socketio.emit('send-message', newMessage);
                    vm.message = "";
                } else {
                    var word = "";
                    word = vm.message.split("#giphy");
                    if (word[1] != undefined) {
                        newMessage.message = word[1].trim();
                        socketio.emit('req-message-gif', newMessage);
                        vm.gif = false;
                        vm.message = "";
                    }
                }
            }
        };

        vm.sendgif = function () {
            vm.message = "#giphy ";
            vm.gif = true;
        };

        vm.chat = function () {
            socketio.on('new-message', function (message) {
                vm.chats.push(message);
            });
            socketio.on('res-message-gif', function (message) {
                vm.chats.push(message);
            })
            socketio.on('active-users', function (users) {
                vm.users = users;
            })

            socketio.on('user-name', function (user_name) {
                vm.nickname_storage = user_name;
            })

        };

        vm.logOut = function () {
            utilitiesService.removeLocalStorageItem("nickname");
            socketio.emit("logout", vm.nickname_storage);
            $state.go('login');
        };

        vm.openMenu = function () {
            vm.menu = 'open';
        }

        vm.closeMenu = function () {
            vm.menu = '';
        }

        vm.getChat();
        vm.getUsers();
        vm.chat();
    }

}());
(function () {
    "use strict";

    angular
        .module('chat')
        .factory('utilitiesService', utilitiesService);

    utilitiesService.$inject = [];

    function utilitiesService() {

        var vm = this;

        /**
         * Método para obtener el valor alamacenado en localstorage en una clave la que debe ser ingresada por parametro.
         * @method getLocalStorageItem
         * @public
         * @params key
         * @return data
         */
        vm.getLocalStorageItem = function (key) {
            var data = localStorage.getItem(key);
            if (!data) {
                data = undefined;
            } else {
                data = JSON.parse(data);
            }
            return data;
        };

        /**
         * Método para alamacenar el valor y su clave en localstorage, ambos entran por parametro.
         * @method setLocalStorageItem
         * @public
         * @params key, value
         */
        vm.setLocalStorageItem = function (key, value) {
            localStorage.setItem(key, JSON.stringify(value));
        }

        /**
         * Método para remover el valor de una clave en localstorage, entra por parametro la clave a eliminar.
         * @method removeLocalStorageItem
         * @public
         * @params key
         */
        vm.removeLocalStorageItem = function (key) {
            localStorage.removeItem(key);
        };

        return {
            getLocalStorageItem : vm.getLocalStorageItem,
            setLocalStorageItem : vm.setLocalStorageItem,
            removeLocalStorageItem :  vm.removeLocalStorageItem
        };

    }
})();
(function () {
    'use strict';

    angular
        .module('chat')
        .factory('socketio', socketio);

    socketio.inject = ['$rootScope', 'constantService'];
    
    function socketio($rootScope, constantService) {

        var vm = this;
        vm.socket = io.connect(constantService.server);

        vm.on = function (eventName, callback) {
            vm.socket.on(eventName, function () {
                var args = arguments;
                $rootScope.$apply(function () {
                    callback.apply(vm.socket, args);
                });
            });
        }
        vm.emit = function (eventName, data, callback) {
            vm.socket.emit(eventName, data, function () {
                var args = arguments;
                $rootScope.$apply(function () {
                    if (callback) {
                        callback.apply(vm.socket, args);
                    }
                });
            });
        }
        return {
            on: vm.on,
            emit: vm.emit
        }
    }

})();
(function () {
    'use strict';

    angular.module('chat')

        .directive('dlEnterKey', function () {
            return function (scope, element, attrs) {

                element.bind("keydown keypress", function (event) {
                    var keyCode = event.which || event.keyCode;

                    // If enter key is pressed
                    if (keyCode === 13) {
                        scope.$apply(function () {
                            // Evaluate the expression
                            scope.$eval(attrs.dlEnterKey);
                        });

                        event.preventDefault();
                    }
                });
            };
        })
        .directive('scrollToBottom', function ($timeout, $window) {
            return {
                scope: {
                    scrollToBottom: "="
                },
                restrict: 'A',
                link: function (scope, element, attr) {
                    scope.$watchCollection('scrollToBottom', function (newVal) {
                        if (newVal) {
                            $timeout(function () {
                                element[0].scrollTop = element[0].scrollHeight;
                            }, 0);
                        }

                    });
                }
            };
        });


}());

(function () {
    "use strict";

    angular
        .module('chat')
        .factory('constantServiceString', constantServiceString);

    constantServiceString.$inject = ['$q', '$http'];

    function constantServiceString($q, $http) {

        var vm = this;

        vm.getStrings = getStrings;

        function getStrings() {
            var deferred = $q.defer();
            $http.get('../../strings_spanish.json', {
                cache: true
            }).success(function (data) {
                deferred.resolve(data);
            });
            return deferred.promise;
        }

        return {
            getStrings: vm.getStrings
        }
    }
})();
(function () {
    "use strict";

    angular
        .module('chat')
        .factory('constantService', constantService);

    constantService.$inject = ['$rootScope'];

    function constantService($rootScope) {

        var vm = this;
        //DEVELOP
        vm.endponint = 'http://localhost:3000';

        //PRODUCCION
        //vm.endponint = 'https://pragmachat.herokuapp.com';

        vm.endponint = '';

        vm.getUrlChat = function () {
            return vm.endponint + '/api/getchats';
        };

        vm.getUrlUsers = function () {
            return vm.endponint + '/api/users';
        };

        return {
            server: vm.endponint,
            getUrlChat: vm.getUrlChat,
            getUrlUsers: vm.getUrlUsers
        }

    }
})();

"use strict";

angular
    .module('chat')
    .config(routes);

routes.$inject = ['$stateProvider', '$urlRouterProvider', '$httpProvider'];

function routes($stateProvider, $urlRouterProvider, $httpProvider) {

    $stateProvider
        .state('login', {
            url: '/',
            templateUrl: 'app/features/login/login.view.html',
            controller: 'loginController as login'
        })
        .state('chat', {
            cache: false,
            url: '/chat',
            templateUrl: 'app/features/chat/chat.view.html',
            controller: 'chatController as chatCtrl'
        });

    $urlRouterProvider.otherwise('/')
}
"use strict";

angular
    .module('chat')
    .run(run);

run.$inject = ['$rootScope', '$window'];

function run($rootScope, $window) {

}